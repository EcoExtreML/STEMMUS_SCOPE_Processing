[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "PyStemmusScope/__init__.py"


[tool.hatch.build.targets.sdist]
exclude = [
  "/.github", "/.mypy_cache", "/.pytest_cache", "/.githooks",
  "sonar-project.properties", "tests",
]

[tool.hatch.build.targets.wheel]
packages = ["PyStemmusScope"]

[tool.hatch.publish.index]
disable = true  # Requires confirmation when publishing to pypi.

[project]
name = "PyStemmusScope"
description = "Python modules for running the STEMMUS-SCOPE model."
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.8, <3.11"
authors = [
  {email = "f.alidoost@esciencecenter.nl"},
  {name = "Sarah Alidoost, Bart Schilperoort, Yang Liu"}
]
maintainers = [
  {name = "Sarah Alidoost", email= "f.alidoost@esciencecenter.nl"},
  {name = "Yang Liu", email = "y.liu@esciencecenter.nl"},
  {name = "Bart Schilperoort", email = "b.schilperoort@esciencecenter.nl"},
]
keywords = [
  "STEMMUS-SCOPE",
  "py",
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
dependencies = [
    "hdf5storage",
    "netcdf4<=1.5.8",
    "numpy",
    "pandas<2",
    "xarray",
    "rioxarray",  # required for interacting with .tiff files
    "scipy",  # required for xarray's interpolate
    "dask",  # required for xarray.open_mfdataset lazy loading
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "bump2version",
    "hatch",
    "ruff",
    "black",
    "isort",
    "mypy",
    "pytest",
    "pytest-cov",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-jupyter",
    "mkdocstrings[python]",
    "mkdocs-gen-files",
]

[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.default.scripts]
lint = [
  "ruff check .",
  "mypy .",
  "isort --check-only --diff .",
  "black --check --diff .",
]
format = ["isort .", "black .", "lint",]
test = ["pytest ./PyStemmusScope/ ./tests/ --doctest-modules",]
coverage = [
  "pytest --cov --cov-report term --cov-report xml --junitxml=xunit-result.xml tests/",
]

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.scripts]
build = ["mkdocs build"]
serve = ["mkdocs serve"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.mypy]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']
include = '\.pyi?$'

[tool.ruff]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "B",  # flake8-bugbear
  "D",  # pydocstyle
  "C90",  # mccabe complexity
  "UP",  # pyupgrade (upgrade syntax to current syntax)
  "PLE",  # Pylint error https://github.com/charliermarsh/ruff#error-ple
  "PLR",  # Pylint refactor (e.g. too-many-arguments)
  "PLW",  # Pylint warning (useless-else-on-loop)
  "PTH",  # Enforce use of Pathlib
]
extend-select = [
  "D401",  # First line should be in imperative mood
  "D400",  # First line should end in a period.
  "D404",  # First word of the docstring should not be 'This'
  "TID252",  # No relative imports (PEP8 recommendation).
]
ignore = [
  "E501",  # Line length: fails on many docstrings (needs fixing).
  "PLR2004",  # magic value used in comparsion (i.e. `if ndays == 28: month_is_feb`).
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C90", "D", "E", "F", "TID"]
unfixable = []
line-length = 88
exclude = ["docs", "build"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

[tool.ruff.per-file-ignores]
"tests/**" = ["D"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.isort]
py_version=39
skip = [".gitignore", ".dockerignore"]
skip_glob = ["docs/*"]
force_single_line = true
lines_after_imports = 2
no_lines_before = ["FUTURE","STDLIB","THIRDPARTY","FIRSTPARTY","LOCALFOLDER"]
known_first_party = ["lilio"]
src_paths = ["lilio", "tests"]
line_length = 120

[tool.coverage.run]
branch = true
source = ["PyStemmusScope"]
command_line = "-m pytest"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]
